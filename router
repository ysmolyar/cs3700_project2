#!/usr/bin/env python3
""" BGP Router Implementation for CS3700 Project 2 """

import argparse
import json
import select
import socket
import copy
from utils import *

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"
WAIT = "wait"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"

# string encoding
UTF8 = "utf-8"

##########################################################################################


class Router:
    """ Your Router """

    def __init__(self, asn, networks):
        self.routes = {}
        self.updates = {}
        self.relations = {}
        self.sockets = {}
        self.asn = asn
        for relationship in networks:
            network, relation = relationship.split("-")
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation

    def lookup_routes(self, daddr):
        """
        Lookup all valid routes for an address
        :param daddr: data packet being sent
        :return: possible routes to deliver packet
        """
        outroutes = []

        for addr in self.routes:
            for route in self.routes[addr]:
                if addr_in_range(daddr[DEST], route[NTWK], route[NMSK]):
                    cp_route = copy.deepcopy(route)
                    cp_route['peer'] = addr
                    outroutes.append(cp_route)

        return outroutes

    def get_shortest_as_path(self, routes):
        """
        Select the route with the shortest AS Path
        :param routes: possible routes
        :return: routes filtered by shortest AS Path
        """
        outroutes = []
        min_asn_length = len(routes[0][APTH]) if len(routes) > 0 else 0

        for route in routes:
            min_asn_length = min(min_asn_length, len(route[APTH]))

        for route in routes:
            if len(route[APTH]) == min_asn_length:
                outroutes.append(route)

        return outroutes

    def get_highest_preference(self, routes):
        """
        Select the route with the highest localpref
        :param routes: possible routes
        :return: routes filtered by highest localpref
        """
        outroutes = []
        max_pref = routes[0][LPRF]
        for route in routes:
            max_pref = max(max_pref, route[LPRF])

        for route in routes:
            if route[LPRF] == max_pref:
                outroutes.append(route)

        return outroutes

    def get_self_origin(self, routes):
        """
        Select self originating routes
        :param routes: possible routes
        :return: routes filtered with preference to self-originating routes
        """
        outroutes = []

        if len(routes) <= 1 or not any(route[SORG] is True for route in routes):
            outroutes = routes

        if any(route[SORG] is True for route in routes):
            outroutes = [route for route in routes if route[SORG] is True]

        return outroutes

    def get_origin_routes(self, routes):
        """
        Select origin routes with rules: IGP > EGP > UNK
        :param routes: possible routes
        :return: routes filtered with preference to origins IGP > EGP > UNK
        """
        outroutes = []

        for route in routes:
            if route[ORIG] == 'IGP':
                outroutes.append(route)

        if len(outroutes) == 0:
            for route in routes:
                if route[ORIG] == 'EGP':
                    outroutes.append(route)

        if len(outroutes) == 0:
            for route in routes:
                if route[ORIG] == 'UNK':
                    outroutes.append(route)

        return outroutes

    def lowest_ip_address(self, routes):
        """
        Select lowest IP address of routes
        :param routes: possible routes
        :return: routes filtered with preference to lower IP addresses
        """

        outroutes = []
        lowest_address = routes[0][PEER].split('.')[0] if len(routes) > 0 else 0
        for route in routes:
            word = route[PEER].split('.')[0]
            lowest_address = lowest_address if lowest_address < word else word

        for route in routes:
            word = route[PEER].split('.')[0]
            if word == lowest_address:
                outroutes.append(route)

        return outroutes

    def get_longest_prefix(self, routes):
        """
        As tie-breaker, select route with longest matching prefix
        :param routes: routes to break tie
        :return: single route with longest matching prefix
        """
        if len(routes) == 0:
            return None

        max_pref = get_cidr_number(routes[0][NMSK])

        for route in routes:
            pref = get_cidr_number(route[NMSK])
            max_pref = max_pref if max_pref > pref else pref

        for route in routes:
            pref = get_cidr_number(route[NMSK])
            if pref == max_pref:
                return route

        return None

    def filter_relationships(self, srcif, routes):
        """
        Filter routes by relationship with next-hop router.
        Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards
        :param srcif: source interface
        :param routes: possible routes
        :return: subset of routes that follow above rules
        """
        outroutes = []
        if self.relations[srcif] == CUST:
            outroutes = routes
        elif self.relations[srcif] == PEER:
            for route in routes:
                if self.relations[route[PEER]] == CUST:
                    outroutes.append(route)
        else:
            for route in routes:
                if self.relations[route[PEER]] != PEER:
                    outroutes.append(route)

        return outroutes

    def disaggregate(self, srcif, packet):
        """
        Modify forwarding table after revoke message
        :param srcif: source interface of packet
        :param packet: revoke packet
        """
        new_updates = []
        for update in self.updates[packet[SRCE]]:
            if update[TYPE] == 'update':
                new_updates.append(update)
            elif update[TYPE] == 'revoke':
                for msg in update[MESG]:
                    for upd in new_updates:
                        if upd[MESG][NTWK] == msg[NTWK] and upd[MESG][NMSK] == msg[NMSK]:
                            new_updates.remove(upd)

        self.routes[srcif] = []
        for update in new_updates:
            self.coalesce(update[MESG])

    def can_coalesce(self, route_1, route_2):
        """
        Determines if routes can be coalesced. Routes can be coalesced if:
            (1) adjacent numerically
            (2) forward to the same next-hop router
            (3) have the same attributes
        Condition 2 is already satisfied by the structure of the forwarding table.
        :param route_1: route 1
        :param route_2: route 2
        :return: True or False; whether or not routes can coalesce
        """
        mask_length = get_cidr_number(route_1[NMSK])

        adjacent = (get_cidr_number(route_1[NMSK]) == get_cidr_number(route_2[NMSK]) and
                    get_subnet(route_1[NTWK], route_1[NMSK]) != get_subnet(route_2[NTWK], route_2[NMSK]) and
                    addr_to_binary(route_1[NTWK])[:mask_length-1] == addr_to_binary(route_2[NTWK])[:mask_length-1])

        same_attributes = (route_1[LPRF] == route_2[LPRF] and
                           route_1[SORG] == route_2[SORG] and
                           route_1[APTH] == route_2[APTH] and
                           route_1[ORIG] == route_2[ORIG])
        return adjacent and same_attributes

    def coalesce(self, new_route):
        """
        Coalesce any routes that are right next to each other:
        :param new_route: route to coalesce into forwarding table
        :return: True
        """
        if new_route not in self.routes[new_route[PEER]]:
            self.routes[new_route[PEER]].append(new_route)

        for route in self.routes[new_route[PEER]]:
            if self.can_coalesce(route, new_route):
                self.routes[new_route[PEER]].remove(new_route)
                new_network = binary_to_addr(bin(int(addr_to_binary(route[NTWK]), 2) &
                                                 int(addr_to_binary(route[NMSK]), 2))[2:])
                comb_route = {
                    NTWK: new_network,
                    NMSK: decrement_mask(route[NMSK]),
                    LPRF: route[LPRF],
                    APTH: route[APTH],
                    ORIG: route[ORIG],
                    SORG: route[SORG],
                    PEER: route[PEER]
                }

                self.routes[new_route[PEER]].remove(route)
                self.routes[new_route[PEER]].append(comb_route)
                self.coalesce(comb_route)

        return True

    def create_update_packet(self, packet, dest):
        """update packet src, dest, ASPath, and return updated packet"""
        packet_cpy = self.create_revk_packet(packet, dest)
        packet_cpy[MESG][APTH].append(self.asn)
        return packet_cpy

    def create_revk_packet(self, packet, dest):
        """update packet src, dest, and return updated packet"""
        packet_cpy = copy.deepcopy(packet)
        packet_cpy[SRCE] = dest[:-1] + '1'
        packet_cpy[DEST] = dest
        return packet_cpy

    def broadcast_msg(self, srcif, packet, type):
        """
        Broadcasts update and revoke messages to neighboring routers. Broadcast if:
            - message received from a customer: send updates to all other neighbors
            - message received from a peer or a provider: only send updates to your customers
        :param srcif: source interface of packet
        :param packet: packet to broadcast
        :param type: type of message to broadcast, 'update' or 'revoke'
        :return:
        """
        if self.relations[srcif] == CUST:
            for addr, sock in self.sockets.items():
                if addr != srcif:
                    new_packet = {}
                    if type == UPDT:
                        new_packet = self.create_update_packet(packet, addr)
                    elif type == RVKE:
                        new_packet = self.create_revk_packet(packet, addr)
                    sock.sendall(json.dumps(new_packet).encode(UTF8))
        else:
            for addr, sock in self.sockets.items():
                if addr != srcif and self.relations[addr] == CUST:
                    new_packet = {}
                    if type == UPDT:
                        new_packet = self.create_update_packet(packet, addr)
                    elif type == RVKE:
                        new_packet = self.create_revk_packet(packet, addr)
                    sock.sendall(json.dumps(new_packet).encode(UTF8))

    def get_route(self, srcif, daddr):
        """
        Select the best route for a given address. Determine:
            (1) which route (if any) in the forwarding table is the best route to use for the given destination IP
            (2) whether the data packet is being forwarded legally
        :param srcif: source interface
        :param daddr: data packet to send
        """
        routes = self.lookup_routes(daddr)

        # Rules go here
        # 1. Highest Preference
        routes = self.get_highest_preference(routes)
        # 2. Self Origin
        routes = self.get_self_origin(routes)
        # 3. Shortest ASPath
        routes = self.get_shortest_as_path(routes)
        # 4. EGP > IGP > UNK
        routes = self.get_origin_routes(routes)
        # 5. Lowest IP Address
        routes = self.lowest_ip_address(routes)
        # Final check: enforce peering relationships
        routes = self.filter_relationships(srcif, routes)
        # In case of multiple routes, longest prefix wins
        route = self.get_longest_prefix(routes)

        if route is None:
            self.no_route(srcif, daddr)
        else:
            self.forward(route[PEER], daddr)

    def forward(self, srcif, packet):
        """
        Forwards a data packet
        :param srcif: source interface of packet
        :param packet: packet to forward
        :return: True
        """
        self.sockets[srcif].sendall(json.dumps(packet).encode(UTF8))
        return True

    def update(self, srcif, packet):
        """
        handle update packets:
            (1) save a copy of the announcement in case you need it later
            (2) add an entry to your forwarding table
            (3) potentially send copies of the announcement to neighboring routers

        """
        msg = copy.deepcopy(packet)
        msg[MESG][PEER] = srcif

        # (1)
        if packet[SRCE] not in self.updates:
            self.updates[packet[SRCE]] = []

        self.updates[packet[SRCE]].append(msg)

        # (2)
        if srcif not in self.routes:
            self.routes[srcif] = []

        self.coalesce(msg[MESG])

        # (3)
        self.broadcast_msg(srcif, packet, UPDT)

        return True

    def revoke(self, srcif, packet):
        """
        handle revoke packets:
            (1) save a copy of the revocation, in case you need it later
            (2) remove the dead entry from the forwarding table
            (3) potentially send copies of the announcement to neighboring routers
        :param srcif: source interface
        :param packet: revoke packet
        :return: True
        """
        # (1)
        if packet[SRCE] not in self.updates:
            self.updates[packet[SRCE]] = []

        self.updates[packet[SRCE]].append(packet);

        # (2)
        self.disaggregate(srcif, packet)

        # (3)
        self.broadcast_msg(srcif, packet, RVKE)

        return True

    def dump(self, packet):
        """
        Handles dump table requests
        :param packet: dump request packet
        :return: True
        """
        dump_packet = copy.deepcopy(packet)
        dest = dump_packet[SRCE]
        dump_packet[SRCE] = get_self_ip(dest)
        dump_packet[DEST] = dest
        dump_packet[TYPE] = 'table'
        fwd = []
        for src in self.routes:
            for route in self.routes[src]:
                fwd.append({'network': route[NTWK], 'netmask': route[NMSK], 'peer': route['peer']})
        dump_packet[MESG] = fwd

        self.forward(dump_packet[DEST], dump_packet)
        # self.sockets[dump_packet[DEST]].sendall(json.dumps(dump_packet).encode(UTF8))
        return True

    def no_route(self, srcif, packet):
        """
        Sends no route message
        :param srcif: source interface
        :param packet: packet that cannot be delivered
        :return: True
        """
        msg = {'src': get_self_ip(srcif), 'dst': packet[SRCE], 'type': NRTE, 'msg': {}}
        self.sockets[srcif].sendall(json.dumps(msg).encode(UTF8))
        return True

    def handle_packet(self, srcif, packet):
        """
        Dispatches a packet
        :param srcif: source interface of packet
        :param packet: packet to handle
        :return: False if packet can't be handled
        """
        if packet["type"] == UPDT:
            self.update(srcif, packet)
        elif packet["type"] == DATA:
            self.get_route(srcif, packet)
        elif packet["type"] == DUMP:
            self.dump(packet)
        elif packet["type"] == RVKE:
            self.revoke(srcif, packet)
        elif packet["type"] == WAIT:
            pass

        return False

    def send_error(self, conn, msg):
        """ Send a no_route error message """
        # TODO
        return

    def run(self):
        """ main loop for the router """
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return


if __name__ == "__main__":
    PARSER = argparse.ArgumentParser(description='route packets')
    PARSER.add_argument('asn', type=int, metavar="<asn>",
                        help="The autonomous system number of the router")
    PARSER.add_argument('networks', metavar="<ip_address>-<peer|prov|cust>", type=str, nargs="+",
                        help="The IP address and relationship with a neighboring router")
    ARGS = PARSER.parse_args()
    Router(ARGS.asn, ARGS.networks).run()
